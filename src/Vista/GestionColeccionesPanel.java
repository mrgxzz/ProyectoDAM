/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Controlador.HiloCliente;
import Modelo.Autor;
import Modelo.Coleccion;
import Modelo.Comic;
import Modelo.Tabla.TablaColecciones;
import Modelo.Tabla.TablaComics;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import javax.swing.JOptionPane;

/**
 *
 * @author Manu Romeo
 */
public class GestionColeccionesPanel extends javax.swing.JPanel {

    private String camposObligatorios;
    private String camposMarcados;
    private String fechaFormato;
    private String actorYaExiste;
    private String actorAnadido;
    private String actorBorrado;
    private String actorNoExiste;

    HiloCliente h;

    /**
     * Creates new form MoviesBoardPanel
     *
     * @param h
     */
    public GestionColeccionesPanel(HiloCliente h) {
        initComponents();

        this.h = h;

        ArrayList<Coleccion> listaColecciones = (ArrayList<Coleccion>) h.solicitarListaColecciones();

        TablaColecciones modeloTabla = new TablaColecciones(listaColecciones, h);
        tablaColecciones.setModel(modeloTabla);

        //traduccion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblGestionColecciones = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaColecciones = new javax.swing.JTable();
        btnEliminar = new javax.swing.JButton();
        btnAnadir = new javax.swing.JButton();
        lblNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        lblEdicion = new javax.swing.JLabel();
        cmbEdicion = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));
        setToolTipText("");
        setPreferredSize(new java.awt.Dimension(518, 491));

        lblGestionColecciones.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblGestionColecciones.setText("Gestión de colecciones");

        tablaColecciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaColecciones.setRowHeight(45);
        jScrollPane1.setViewportView(tablaColecciones);

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnAnadir.setText("Añadir");
        btnAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnadirActionPerformed(evt);
            }
        });

        lblNombre.setText("Nombre");

        lblEdicion.setText("Edición");

        cmbEdicion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Especial", "Limitada", "Coleccionista", "Básica" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnEliminar)
                .addGap(46, 46, 46))
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnAnadir)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblNombre)
                                .addComponent(lblEdicion))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtNombre)
                                .addComponent(cmbEdicion, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGestionColecciones, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblGestionColecciones, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEliminar)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEdicion)
                    .addComponent(cmbEdicion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(btnAnadir)
                .addContainerGap(95, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed

        String nomColeccion = (String) tablaColecciones.getModel().getValueAt(tablaColecciones.getSelectedRow(), 1);

        int opt = JOptionPane.showConfirmDialog(null, "¿Está seguro que desea eliminar la "
                + "coleccion con nombre: " + nomColeccion + " ? Los cambios realizados son permanentes", "Eliminar un cómic", JOptionPane.YES_NO_OPTION);

        if (opt == JOptionPane.YES_OPTION) {
            int result = h.solicitarEliminarColeccion(nomColeccion);

            if (result > 0) {
                JOptionPane.showMessageDialog(null, "La coleccion ha sido eliminada correctamente.");

                ArrayList<Coleccion> listaColecciones = (ArrayList<Coleccion>) h.solicitarListaColecciones();

                TablaColecciones modeloTabla = new TablaColecciones(listaColecciones, h);
                tablaColecciones.setModel(modeloTabla);

            } else {
                JOptionPane.showMessageDialog(null, "Ha ocurrido un error durante el borrado del autor.");
            }

        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnadirActionPerformed

        if (txtNombre.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "Todos los campos deben estar cubiertos.");
        } else {

            Coleccion coleccion = new Coleccion(txtNombre.getText(), cmbEdicion.getSelectedItem().toString());

            if (h.solicitarGetColeccion(txtNombre.getText()) != null) {
                JOptionPane.showMessageDialog(null, "Ya existe una coleccion con el mismo nombre asociado.");
            } else {

                int result = h.solicitarAnhadirColeccion(coleccion);

                if (result == 1) {
                    JOptionPane.showMessageDialog(null, "La coleccion ha sido creada correctamente.");

                    ArrayList<Coleccion> listaColecciones = (ArrayList<Coleccion>) h.solicitarListaColecciones();

                    TablaColecciones modeloTabla = new TablaColecciones(listaColecciones, h);
                    tablaColecciones.setModel(modeloTabla);

                } else {
                    JOptionPane.showMessageDialog(null, "Ha ocurrido un error durante la creación de la coleccion.");
                }

            }

        }

    }//GEN-LAST:event_btnAnadirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnadir;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JComboBox<String> cmbEdicion;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEdicion;
    private javax.swing.JLabel lblGestionColecciones;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JTable tablaColecciones;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

    public static boolean validarFecha(String fechaIntroducida) {

        try {

            LocalDate fecha = LocalDate.parse(fechaIntroducida, DateTimeFormatter.ISO_LOCAL_DATE);
            return true;

        } catch (DateTimeParseException ex) {
            return false;
        }

    }

    private void traduccion() {

        ResourceBundle rb = ResourceBundle.getBundle("Idiomas.idioma");

        activarTraduccion(rb);

    }

    private void activarTraduccion(ResourceBundle rb) {

//        lblGestionActores.setText(rb.getString("lblGestionActores"));
//        lblApellidos.setText(rb.getString("lblApellidos"));
//        lblFechaNac.setText(rb.getString("lblFechaNac"));
//        lblFoto.setText(rb.getString("lb lFoto"));
//        lblIndicacionBorrarActor.setText(rb.getString("lblIndicacionBorrarActor"));
//        lblNombreActor.setText(rb.getString("lblNombreActor"));
//        
//        
        btnAnadir.setText(rb.getString("btnAñadir"));
        btnEliminar.setText(rb.getString("btnEliminar"));

        camposObligatorios = rb.getString("camposObligatorios");
        camposMarcados = rb.getString("camposMarcados");
        actorYaExiste = rb.getString("actorYaExiste");
        actorAnadido = rb.getString("actorAnadido");
        fechaFormato = rb.getString("fechaFormato");
        actorNoExiste = rb.getString("actorNoExiste");
        actorBorrado = rb.getString("actorBorrado");

    }

}
